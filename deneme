import tkinter as tk

class LinkedList:
    class Node:
        def __init__(self, data):
            self.data = data
            self.next = None

    def __init__(self):
        self.head = None

    def insert_begin(self, data):
        new_node = self.Node(data)
        new_node.next = self.head
        self.head = new_node

    def insert_end(self, data):
        new_node = self.Node(data)
        if not self.head:
            self.head = new_node
            return
        last = self.head
        while last.next:
            last = last.next
        last.next = new_node

    def remove_node(self, data):
        if self.head is None:
            return
        if self.head.data == data:
            self.head = self.head.next
            return
        current = self.head
        while current.next and current.next.data != data:
            current = current.next
        if current.next:
            current.next = current.next.next

    def get_elements(self):
        elements = []
        current = self.head
        while current:
            elements.append(current.data)
            current = current.next
        return elements


def draw_linkedlist(linkedlist):
    middle_framee.delete("all")
    elements = linkedlist.get_elements()
    x, y = 10, 10
    box_width, box_height = 50, 30
    for i, element in enumerate(elements):
        middle_framee.create_rectangle(x, y, x + box_width, y + box_height, outline="black")
        middle_framee.create_text(x + box_width // 2, y + box_height // 2, text=str(element))
        if i < len(elements) - 1:
            middle_framee.create_line(x + box_width, y + box_height // 2, x + box_width + 20, y + box_height // 2, arrow=tk.LAST)
        x += box_width + 30


def show_linkedlist():
    # Clean middle_framee and left_frame
    middle_framee.delete("all")
    for widget in left_frame.winfo_children():
        widget.destroy()

    # Add element to begin
    entry_addBeginL = tk.Entry(left_frame)
    entry_addBeginL.pack()
    btn_addBeginL = tk.Button(left_frame, text="Add begin", command=lambda: add_element('begin'))
    btn_addBeginL.pack(pady=(0, 20))

    # Add element to end
    entry_addEndL = tk.Entry(left_frame)
    entry_addEndL.pack()
    btn_addEndL = tk.Button(left_frame, text="Add End", command=lambda: add_element('end'))
    btn_addEndL.pack(pady=(0, 20))

    # Remove element
    entry_removeL = tk.Entry(left_frame)
    entry_removeL.pack()
    btn_removeL = tk.Button(left_frame, text="Remove", command=remove_element)
    btn_removeL.pack()


def add_element(position):
    if position == 'begin':
        data = entry_addBeginL.get()
        linked_list.insert_begin(data)
    elif position == 'end':
        data = entry_addEndL.get()
        linked_list.insert_end(data)
    draw_linkedlist(linked_list)


def remove_element():
    data = entry_removeL.get()
    linked_list.remove_node(data)
    draw_linkedlist(linked_list)


# Initialize the main window and frames
root = tk.Tk()
root.title("Linked List Visualizer")

left_frame = tk.Frame(root)
left_frame.pack(side=tk.LEFT, padx=10, pady=10)

middle_framee = tk.Canvas(root, width=600, height=400, bg="white")
middle_framee.pack(side=tk.RIGHT, padx=10, pady=10)

# Create a LinkedList instance
linked_list = LinkedList()

# Show the linked list operations interface
show_linkedlist()

root.mainloop()
